"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.applyChanges = applyChanges;
exports.applyAllChanges = applyAllChanges;

var _rxjs = require("rxjs");

var Range = require("atom").Range;
function applyChanges(editor, response) {
    if (!response) return;
    if (response.Changes) {
        (function () {
            var buffer = editor.getBuffer();
            var checkpoint = buffer.createCheckpoint();
            response.Changes.forEach(function (change) {
                var range = new Range([change.StartLine, change.StartColumn], [change.EndLine, change.EndColumn]);
                buffer.setTextInRange(range, change.NewText);
            });
            buffer.groupChangesSinceCheckpoint(checkpoint);
        })();
    } else if (response.Buffer) {
        editor.setText(response.Buffer);
    }
}
function resetPreviewTab() {
    var pane = atom.views.getView(atom.workspace.getActivePane());
    if (pane) {
        var title = pane.querySelector(".title.temp");
        if (title) {
            title.classList.remove("temp");
        }
        var tab = pane.querySelector(".preview-tab.active");
        if (tab) {
            tab.classList.remove("preview-tab");
            tab.isPreviewTab = false;
        }
    }
}
function applyAllChanges(changes) {
    resetPreviewTab();
    return _rxjs.Observable.from(changes).concatMap(function (change) {
        return atom.workspace.open(change.FileName, undefined).then(function (editor) {
            resetPreviewTab();
            applyChanges(editor, change);
        });
    }).subscribe();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hcHBseS1jaGFuZ2VzLnRzIiwibGliL3NlcnZpY2VzL2FwcGx5LWNoYW5nZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFNQSxZLEdBQUEsWTtRQW9DQSxlLEdBQUEsZTs7QUN6Q0E7O0FEQ0EsSUFBTSxRQUFRLFFBQVEsTUFBUixFQUFnQixLQUE5QjtBQUlBLFNBQUEsWUFBQSxDQUE2QixNQUE3QixFQUFzRCxRQUF0RCxFQUFtSTtBQUMvSCxRQUFJLENBQUMsUUFBTCxFQUFlO0FBQ2YsUUFBSSxTQUFTLE9BQWIsRUFBc0I7QUFBQTtBQUNsQixnQkFBTSxTQUFTLE9BQU8sU0FBUCxFQUFmO0FBQ0EsZ0JBQU0sYUFBYSxPQUFPLGdCQUFQLEVBQW5CO0FBRUEscUJBQVMsT0FBVCxDQUFpQixPQUFqQixDQUF5QixVQUFDLE1BQUQsRUFBTztBQUM1QixvQkFBTSxRQUFRLElBQUksS0FBSixDQUFVLENBQUMsT0FBTyxTQUFSLEVBQW1CLE9BQU8sV0FBMUIsQ0FBVixFQUFrRCxDQUFDLE9BQU8sT0FBUixFQUFpQixPQUFPLFNBQXhCLENBQWxELENBQWQ7QUFDQSx1QkFBTyxjQUFQLENBQXNCLEtBQXRCLEVBQTZCLE9BQU8sT0FBcEM7QUFDSCxhQUhEO0FBS0EsbUJBQU8sMkJBQVAsQ0FBbUMsVUFBbkM7QUFUa0I7QUFVckIsS0FWRCxNQVVPLElBQUksU0FBUyxNQUFiLEVBQXFCO0FBQ3hCLGVBQU8sT0FBUCxDQUFlLFNBQVMsTUFBeEI7QUFDSDtBQUNKO0FBS0QsU0FBQSxlQUFBLEdBQUE7QUFDSSxRQUFNLE9BQXlCLEtBQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsS0FBSyxTQUFMLENBQWUsYUFBZixFQUFuQixDQUEvQjtBQUNBLFFBQUksSUFBSixFQUFVO0FBQ1YsWUFBTSxRQUFRLEtBQUssYUFBTCxDQUFtQixhQUFuQixDQUFkO0FBQ0EsWUFBSSxLQUFKLEVBQVc7QUFDUCxrQkFBTSxTQUFOLENBQWdCLE1BQWhCLENBQXVCLE1BQXZCO0FBQ0g7QUFFRCxZQUFNLE1BQU0sS0FBSyxhQUFMLENBQW1CLHFCQUFuQixDQUFaO0FBQ0EsWUFBSSxHQUFKLEVBQVM7QUFDTCxnQkFBSSxTQUFKLENBQWMsTUFBZCxDQUFxQixhQUFyQjtBQUNNLGdCQUFLLFlBQUwsR0FBb0IsS0FBcEI7QUFDVDtBQUNBO0FBQ0o7QUFFRCxTQUFBLGVBQUEsQ0FBZ0MsT0FBaEMsRUFBc0U7QUFDbEU7QUFDQSxXQUFPLGlCQUFXLElBQVgsQ0FBNkMsT0FBN0MsRUFDRixTQURFLENBQ1E7QUFBQSxlQUF5QyxLQUFLLFNBQUwsQ0FBZSxJQUFmLENBQW9CLE9BQU8sUUFBM0IsRUFBcUMsU0FBckMsRUFDL0MsSUFEK0MsQ0FDMUMsa0JBQU07QUFDUjtBQUNBLHlCQUFhLE1BQWIsRUFBcUIsTUFBckI7QUFDSCxTQUorQyxDQUF6QztBQUFBLEtBRFIsRUFNRixTQU5FLEVBQVA7QUFPSCIsImZpbGUiOiJsaWIvc2VydmljZXMvYXBwbHktY2hhbmdlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9kZWxzfSBmcm9tIFwib21uaXNoYXJwLWNsaWVudFwiO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbmNvbnN0IFJhbmdlID0gcmVxdWlyZShcImF0b21cIikuUmFuZ2U7XHJcbi8qIHRzbGludDplbmFibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gXCJyeGpzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlDaGFuZ2VzKGVkaXRvcjogQXRvbS5UZXh0RWRpdG9yLCByZXNwb25zZTogeyBDaGFuZ2VzPzogTW9kZWxzLkxpbmVQb3NpdGlvblNwYW5UZXh0Q2hhbmdlW107IEJ1ZmZlcj86IHN0cmluZzsgfSkge1xyXG4gICAgaWYgKCFyZXNwb25zZSkgcmV0dXJuO1xyXG4gICAgaWYgKHJlc3BvbnNlLkNoYW5nZXMpIHtcclxuICAgICAgICBjb25zdCBidWZmZXIgPSBlZGl0b3IuZ2V0QnVmZmVyKCk7XHJcbiAgICAgICAgY29uc3QgY2hlY2twb2ludCA9IGJ1ZmZlci5jcmVhdGVDaGVja3BvaW50KCk7XHJcblxyXG4gICAgICAgIHJlc3BvbnNlLkNoYW5nZXMuZm9yRWFjaCgoY2hhbmdlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gbmV3IFJhbmdlKFtjaGFuZ2UuU3RhcnRMaW5lLCBjaGFuZ2UuU3RhcnRDb2x1bW5dLCBbY2hhbmdlLkVuZExpbmUsIGNoYW5nZS5FbmRDb2x1bW5dKTtcclxuICAgICAgICAgICAgYnVmZmVyLnNldFRleHRJblJhbmdlKHJhbmdlLCBjaGFuZ2UuTmV3VGV4dCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJ1ZmZlci5ncm91cENoYW5nZXNTaW5jZUNoZWNrcG9pbnQoY2hlY2twb2ludCk7XHJcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLkJ1ZmZlcikge1xyXG4gICAgICAgIGVkaXRvci5zZXRUZXh0KHJlc3BvbnNlLkJ1ZmZlcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIElmIHlvdSBoYXZlIHByZXZpZXcgdGFicyBlbmFibGVkLFxyXG4vLyAgICAgdGhleSB3aWxsIGFjdHVhbGx5IHRyeSB0byBjbG9zZVxyXG4vLyAgICAgd2l0aCBjaGFuZ2VzIHN0aWxsLlxyXG5mdW5jdGlvbiByZXNldFByZXZpZXdUYWIoKSB7XHJcbiAgICBjb25zdCBwYW5lOiBIVE1MRWxlbWVudCA9IDxhbnk+YXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKSk7XHJcbiAgICBpZiAocGFuZSkge1xyXG4gICAgY29uc3QgdGl0bGUgPSBwYW5lLnF1ZXJ5U2VsZWN0b3IoXCIudGl0bGUudGVtcFwiKTtcclxuICAgIGlmICh0aXRsZSkge1xyXG4gICAgICAgIHRpdGxlLmNsYXNzTGlzdC5yZW1vdmUoXCJ0ZW1wXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRhYiA9IHBhbmUucXVlcnlTZWxlY3RvcihcIi5wcmV2aWV3LXRhYi5hY3RpdmVcIik7XHJcbiAgICBpZiAodGFiKSB7XHJcbiAgICAgICAgdGFiLmNsYXNzTGlzdC5yZW1vdmUoXCJwcmV2aWV3LXRhYlwiKTtcclxuICAgICAgICAoPGFueT50YWIpLmlzUHJldmlld1RhYiA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlBbGxDaGFuZ2VzKGNoYW5nZXM6IE1vZGVscy5Nb2RpZmllZEZpbGVSZXNwb25zZVtdKSB7XHJcbiAgICByZXNldFByZXZpZXdUYWIoKTtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb208TW9kZWxzLk1vZGlmaWVkRmlsZVJlc3BvbnNlPihjaGFuZ2VzKVxyXG4gICAgICAgIC5jb25jYXRNYXAoY2hhbmdlID0+IDxQcm9taXNlPEF0b20uVGV4dEVkaXRvcj4+PGFueT5hdG9tLndvcmtzcGFjZS5vcGVuKGNoYW5nZS5GaWxlTmFtZSwgdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAudGhlbihlZGl0b3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzZXRQcmV2aWV3VGFiKCk7XHJcbiAgICAgICAgICAgICAgICBhcHBseUNoYW5nZXMoZWRpdG9yLCBjaGFuZ2UpO1xyXG4gICAgICAgICAgICB9KSlcclxuICAgICAgICAuc3Vic2NyaWJlKCk7XHJcbn1cclxuIiwiY29uc3QgUmFuZ2UgPSByZXF1aXJlKFwiYXRvbVwiKS5SYW5nZTtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5Q2hhbmdlcyhlZGl0b3IsIHJlc3BvbnNlKSB7XG4gICAgaWYgKCFyZXNwb25zZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChyZXNwb25zZS5DaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGVkaXRvci5nZXRCdWZmZXIoKTtcbiAgICAgICAgY29uc3QgY2hlY2twb2ludCA9IGJ1ZmZlci5jcmVhdGVDaGVja3BvaW50KCk7XG4gICAgICAgIHJlc3BvbnNlLkNoYW5nZXMuZm9yRWFjaCgoY2hhbmdlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IG5ldyBSYW5nZShbY2hhbmdlLlN0YXJ0TGluZSwgY2hhbmdlLlN0YXJ0Q29sdW1uXSwgW2NoYW5nZS5FbmRMaW5lLCBjaGFuZ2UuRW5kQ29sdW1uXSk7XG4gICAgICAgICAgICBidWZmZXIuc2V0VGV4dEluUmFuZ2UocmFuZ2UsIGNoYW5nZS5OZXdUZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJ1ZmZlci5ncm91cENoYW5nZXNTaW5jZUNoZWNrcG9pbnQoY2hlY2twb2ludCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlc3BvbnNlLkJ1ZmZlcikge1xuICAgICAgICBlZGl0b3Iuc2V0VGV4dChyZXNwb25zZS5CdWZmZXIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlc2V0UHJldmlld1RhYigpIHtcbiAgICBjb25zdCBwYW5lID0gYXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKSk7XG4gICAgaWYgKHBhbmUpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBwYW5lLnF1ZXJ5U2VsZWN0b3IoXCIudGl0bGUudGVtcFwiKTtcbiAgICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgICAgICB0aXRsZS5jbGFzc0xpc3QucmVtb3ZlKFwidGVtcFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YWIgPSBwYW5lLnF1ZXJ5U2VsZWN0b3IoXCIucHJldmlldy10YWIuYWN0aXZlXCIpO1xuICAgICAgICBpZiAodGFiKSB7XG4gICAgICAgICAgICB0YWIuY2xhc3NMaXN0LnJlbW92ZShcInByZXZpZXctdGFiXCIpO1xuICAgICAgICAgICAgdGFiLmlzUHJldmlld1RhYiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5QWxsQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgcmVzZXRQcmV2aWV3VGFiKCk7XG4gICAgcmV0dXJuIE9ic2VydmFibGUuZnJvbShjaGFuZ2VzKVxuICAgICAgICAuY29uY2F0TWFwKGNoYW5nZSA9PiBhdG9tLndvcmtzcGFjZS5vcGVuKGNoYW5nZS5GaWxlTmFtZSwgdW5kZWZpbmVkKVxuICAgICAgICAudGhlbihlZGl0b3IgPT4ge1xuICAgICAgICByZXNldFByZXZpZXdUYWIoKTtcbiAgICAgICAgYXBwbHlDaGFuZ2VzKGVkaXRvciwgY2hhbmdlKTtcbiAgICB9KSlcbiAgICAgICAgLnN1YnNjcmliZSgpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
