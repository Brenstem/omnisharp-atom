"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.init = init;
exports.registerIndie = registerIndie;

var _omni = require("../server/omni");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _omnisharpClient = require("omnisharp-client");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Range = require("atom").Range;

function mapIndieValues(error) {
    var level = error.LogLevel.toLowerCase();
    return {
        type: level,
        text: error.Text + " [" + _omni.Omni.getFrameworks(error.Projects) + "] ",
        filePath: error.FileName,
        range: new Range([error.Line, error.Column], [error.EndLine, error.EndColumn])
    };
}
function showLinter() {
    _lodash2.default.each(document.querySelectorAll("linter-bottom-tab"), function (element) {
        return element.style.display = "";
    });
    _lodash2.default.each(document.querySelectorAll("linter-bottom-status"), function (element) {
        return element.style.display = "";
    });
    var panel = document.querySelector("linter-panel");
    if (panel) panel.style.display = "";
}
function hideLinter() {
    _lodash2.default.each(document.querySelectorAll("linter-bottom-tab"), function (element) {
        return element.style.display = "none";
    });
    _lodash2.default.each(document.querySelectorAll("linter-bottom-status"), function (element) {
        return element.style.display = "none";
    });
    var panel = document.querySelector("linter-panel");
    if (panel) panel.style.display = "none";
}
var showHiddenDiagnostics = true;
function init(linter) {
    var disposable = new _omnisharpClient.CompositeDisposable();
    var cd = void 0;
    disposable.add(atom.config.observe("omnisharp-atom.hideLinterInterface", function (hidden) {
        if (hidden) {
            cd = new _omnisharpClient.CompositeDisposable();
            disposable.add(cd);
            cd.add(_omni.Omni.activeEditor.filter(function (z) {
                return !z;
            }).subscribe(showLinter));
            cd.add(_omni.Omni.activeEditor.filter(function (z) {
                return !!z;
            }).subscribe(hideLinter));
        } else {
            if (cd) {
                disposable.remove(cd);
                cd.dispose();
            }
            showLinter();
        }
    }));
    disposable.add(atom.config.observe("omnisharp-atom.showHiddenDiagnostics", function (show) {
        showHiddenDiagnostics = show;
        atom.workspace.getTextEditors().forEach(function (editor) {
            var editorLinter = linter.getEditorLinter(editor);
            if (editorLinter) {
                editorLinter.lint(true);
            }
        });
    }));
    disposable.add(_omni.Omni.activeEditor.filter(function (z) {
        return !!z;
    }).take(1).delay(1000).subscribe(function (e) {
        _omni.Omni.whenEditorConnected(e).subscribe(function () {
            atom.workspace.getTextEditors().forEach(function (editor) {
                var editorLinter = linter.getEditorLinter(editor);
                if (editorLinter) {
                    editorLinter.lint(true);
                }
            });
        });
    }));
    return disposable;
}
function registerIndie(registry, disposable) {
    var linter = registry.register({ name: "c#" });
    disposable.add(linter, _omni.Omni.diagnostics.subscribe(function (diagnostics) {
        var messages = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = diagnostics[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var item = _step.value;

                if (showHiddenDiagnostics || item.LogLevel !== "Hidden") {
                    messages.push(mapIndieValues(item));
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        linter.setMessages(messages);
    }));
}
//# sourceMappingURL=data:application/json;base64,
